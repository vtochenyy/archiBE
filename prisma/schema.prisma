generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlaceNumber {
  one
  two
  three
  four
}

model Administrator {
  id         String       @unique @db.Uuid
  name       String
  login      String       @unique
  password   String
  surname    String
  middlename String
  createdAt  DateTime     @default(now())
  GlobalMenu GlobalMenu[]
}

model DictionaryTypeOfDish {
  id          String   @unique @db.Uuid
  code        Int      @unique
  description String
  Dish        Dish[]
  createdAt   DateTime @default(now())
}

model DictionaryTypeOfFoodIntake {
  id               String             @unique @db.Uuid
  code             Int                @unique
  description      String
  createdAt        DateTime           @default(now())
  DishToGlobalMenu DishToGlobalMenu[]
  DishToMenu       DishToMenu[]
}

model GlobalMenu {
  id         String             @unique @db.Uuid
  targetDate DateTime           @db.Date
  createdAt  DateTime           @default(now())
  createdBy  String             @db.Uuid
  CreatedBy  Administrator      @relation(fields: [createdBy], references: [id])
  Dishes     DishToGlobalMenu[]
  Menu       Menu[]
}

model DishToGlobalMenu {
  id                 String                     @unique @db.Uuid
  GlobalMenu         GlobalMenu                 @relation(fields: [globalMenuId], references: [id])
  globalMenuId       String                     @db.Uuid
  dishId             String                     @db.Uuid
  Dish               Dish                       @relation(fields: [dishId], references: [id])
  typeOfFoodIntakeId String                     @db.Uuid
  TypeOfFoodIntakeId DictionaryTypeOfFoodIntake @relation(fields: [typeOfFoodIntakeId], references: [id])

  @@id([globalMenuId, dishId])
}

model DishToMenu {
  id                 String                     @unique @db.Uuid
  Menu               Menu                       @relation(fields: [menuId], references: [id])
  menuId             String                     @db.Uuid
  dishId             String                     @db.Uuid
  placeNumber        Int                        @db.SmallInt
  typeOfFoodIntakeId String                     @db.Uuid
  TypeOfFoodIntakeId DictionaryTypeOfFoodIntake @relation(fields: [typeOfFoodIntakeId], references: [id])
  Dish               Dish                       @relation(fields: [dishId], references: [id])

  @@id([menuId, dishId])
}

model Menu {
  id           String       @unique @db.Uuid
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @db.Uuid
  createdAt    DateTime     @default(now())
  globalMenuId String       @db.Uuid
  GlobalMenu   GlobalMenu   @relation(fields: [globalMenuId], references: [id])
  tableId      String       @db.Uuid
  Table        Table        @relation(fields: [tableId], references: [id])
  DishToMenu   DishToMenu[]
}

model User {
  id         String       @unique @db.Uuid
  table      Table        @relation(fields: [tableId], references: [id])
  tableId    String       @db.Uuid
  itemNumber PlaceNumber?
  createdAt  DateTime     @default(now())
  menu       Menu[]
}

model Table {
  id          String   @unique @db.Uuid
  tableNumber Int
  User        User[]
  createdAt   DateTime @default(now())
  Menu        Menu[]
}

model Member {
  id        String   @unique @db.Uuid
  item      Int
  createdAt DateTime @default(now())
}

model Dish {
  id               String               @unique @db.Uuid
  name             String
  weight           String
  protein          Int
  fats             Int
  carbohydrates    Int
  calories         Float
  dieta            Json?
  isForKids        Boolean
  isDefaultBludo   Boolean?
  typeOfDish       DictionaryTypeOfDish @relation(fields: [typeOfDishId], references: [id])
  typeOfDishId     String               @db.Uuid
  createdAt        DateTime             @default(now())
  DishToMenu       DishToMenu[]
  DishToGlobalMenu DishToGlobalMenu[]
}

model OutgoingQueriesLog {
  id           String   @unique @db.Uuid
  url          String
  method       String
  headers      String
  requestBody  Json?
  responseBody Json?
  createdAt    DateTime @default(now())
}
